@page "/"
@inject IJSRuntime JS
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

<div class="container">
    <header>
        <h1>CodeCraft_UX</h1>
        <p>@(SelectLangage == "FR" ? "Bienvenue sur l'application CodeCraft_UX." : "Welcome to CodeCraft_UX app.")</p>

        <div class="theme-switch">
            <label class="switch">
                <input type="checkbox" @onchange="ToggleTheme" checked="@IsDarkMode" />
                <span class="slider round"></span>
                <span class="label-text">@(SelectLangage == "FR" ? "Mode Sombre" : "Dark Mode")</span>
            </label>
        </div>

        <div class="build-number">@(SelectLangage == "FR" ? "Version :" : "Build:") @BuildNumber</div>
    </header>

    <form method="post" asp-controller="Account" asp-action="LoginWithGoogle">
        <button type="submit" class="btn-google">
            @(SelectLangage == "FR" ? "Se connecter avec son email ou nom d'utilisateur" : "Sign in with email or username")
        </button>
    </form>

    <div class="development-notice">
        @(SelectLangage == "FR" ? "En cours de développement" : "Under development")
    </div>

    <div class="language-select">
        <select id="SelectLangage" @onchange="OnSelectLangageChanged">
            <option value="EN" @(SelectLangage= ="EN" ? "selected" : "" )>English</option>
            <option value="FR" @(SelectLangage= ="FR" ? "selected" : "" )>Français</option>
        </select>
    </div>
</div>

<style>
    :root {
        --background-color-light: #f0f4f8;
        --text-color-light: #333333;
        --container-bg-color-light: #ffffff;
        --header-color-light: #333333;
        --subtext-color-light: #aaaaaa;
        --background-color-dark: #121212;
        --text-color-dark: #ffffff;
        --container-bg-color-dark: #1e1e1e;
        --header-color-dark: #ffffff;
        --subtext-color-dark: #bbbbbb;
        --primary-color: #4caf50;
        --secondary-color: #ff9800;
        --error-color: #f44336;
        --button-bg-color: #4285f4;
        --button-hover-bg-color: #357ae8;
    }

    body {
        background-color: var(--background-color);
        color: var(--text-color);
        font-family: 'Roboto', sans-serif;
        transition: background-color 0.3s, color 0.3s;
    }

    .container {
        text-align: center;
        background: var(--container-bg-color);
        padding: 40px;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 600px;
        margin: 0 auto;
        transition: background 0.3s;
    }

    header h1 {
        font-size: 3rem;
        color: var(--header-color);
        margin-bottom: 0.5rem;
        transition: color 0.3s;
    }

    p {
        font-size: 1.5rem;
        color: var(--text-color);
        margin-bottom: 2rem;
        transition: color 0.3s;
    }

    .build-number {
        font-size: 1rem;
        color: var(--subtext-color);
        margin-top: 1rem;
        transition: color 0.3s;
    }

    .btn-google {
        display: inline-block;
        background-color: var(--button-bg-color);
        color: white;
        padding: 12px 24px;
        border-radius: 25px;
        font-size: 1.2rem;
        font-weight: 500;
        text-decoration: none;
        transition: background-color 0.3s, transform 0.3s;
        border: none;
        cursor: pointer;
        margin-top: 20px;
    }

        .btn-google:hover {
            background-color: var(--button-hover-bg-color);
            transform: translateY(-2px);
        }

    .development-notice {
        font-size: 1rem;
        color: var(--secondary-color);
        margin-top: 2rem;
        transition: color 0.3s;
    }

    .theme-switch {
        margin-top: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: 0.4s;
        border-radius: 34px;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: 0.4s;
            border-radius: 50%;
        }

    input:checked + .slider {
        background-color: var(--primary-color);
    }

        input:checked + .slider:before {
            transform: translateX(26px);
        }

    .label-text {
        margin-left: 10px;
        font-size: 1rem;
        color: var(--text-color);
        transition: color 0.3s;
    }

    #SelectLangage {
        padding: 10px 15px;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 25px;
        background-color: orange;
        color: black;
        margin-top: 1rem;
        transition: background-color 0.3s, color 0.3s;
    }

        #SelectLangage option {
            background-color: #fff;
            color: black;
        }

            #SelectLangage option:hover {
                background-color: #f0f0f0;
            }

    /* Dark Mode Styles */
    body.dark-mode {
        --background-color: var(--background-color-dark);
        --text-color: var(--text-color-dark);
        --container-bg-color: var(--container-bg-color-dark);
        --header-color: var(--header-color-dark);
        --subtext-color: var(--subtext-color-dark);
    }
</style>

<script>
    function toggleTheme(isDarkMode) {
        if (isDarkMode) {
            document.body.classList.add('dark-mode');
        } else {
            document.body.classList.remove('dark-mode');
        }
    }
</script>

@code {
    private const string defaultLanguage = "EN";
    private string SelectLangage = defaultLanguage;
    private string BuildNumber { get; set; }
    private bool IsDarkMode { get; set; }

    protected override void OnInitialized()
    {
        BuildNumber = Configuration["BuildNumber"];
        IsDarkMode = RecupererDarkMode();
        JS.InvokeVoidAsync("toggleTheme", IsDarkMode);
    }

    private void OnSelectLangageChanged(ChangeEventArgs e)
    {
        SelectLangage = e.Value?.ToString() ?? defaultLanguage;
    }

    private async Task ToggleTheme(ChangeEventArgs e)
    {
        IsDarkMode = (bool)e.Value;
        await JS.InvokeVoidAsync("toggleTheme", IsDarkMode);
        SauverDarkMode(IsDarkMode);
    }

    public void SauverDarkMode(bool isDarkMode)
    {
        var path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "userprefs.txt");
        var prefs = new Dictionary<string, string> { { "darkmode", isDarkMode.ToString() } };
        File.WriteAllLines(path, prefs.Select(kvp => $"{kvp.Key}={kvp.Value}"));
    }

    public bool RecupererDarkMode()
    {
        var path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "userprefs.txt");
        if (File.Exists(path))
        {
            var prefs = File.ReadAllLines(path)
                            .Select(line => line.Split('='))
                            .ToDictionary(parts => parts[0], parts => parts[1]);
            if (prefs.TryGetValue("darkmode", out var isDarkModeStr) && bool.TryParse(isDarkModeStr, out var isDarkMode))
            {
                return isDarkMode;
            }
        }
        return false;
    }
}
