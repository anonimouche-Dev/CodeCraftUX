@page "/Story"
@using System.IO;
<h1>Story</h1>

        
@if (heroName is null)
{
<<<<<<< Updated upstream
    <div class="language-selection">
        <select id="SelectLangage" @bind="@SelectLangage">
            <option value="EN">EN</option>
            <option value="FR">FR</option>
        </select>
=======
  
>>>>>>> Stashed changes
        @if (SelectLangage == "EN")
        {
            UpdateStories(SelectLangage);
            <input id="hero-name-input" type="text" @bind="@heroName" placeholder="Enter your name" />
        }
        else if (SelectLangage == "FR")
        {
            UpdateStories(SelectLangage);
            <input id="hero-name-input" type="text" @bind="@heroName" placeholder="Entrez votre nom" />
        }  
}
else
{
    //EnregistrerDonnées();
    <div class="language-selection">
        <select id="SelectLangage" @bind="@SelectLangage" onclick="OnSelectLangageChanged">
            <option value="EN">EN</option>
            <option value="FR">FR</option>
        </select>
    </div>

    <div class="main-container">
        @if (tellStory is null)
        {
            <div class="story-container">  
                @if (SelectLangage == "EN")
                {
                    <h3>Hello @heroName</h3>
                    UpdateStories(SelectLangage = "EN");
                }
                else if (SelectLangage == "FR")
                {
                    UpdateStories(SelectLangage = "EN");
                    <h3>Bonjour @heroName</h3>
                }
                else
                {
                    UpdateStories(SelectLangage);
                    <h3>Hello @heroName</h3>
                }
                @foreach (var story in stories)
                {
                    <style>
                        .container {
                            display: flex;
                            flex-wrap: wrap;
                            justify-content: space-between;
                            align-items: center;
                            width: 100%;
                            max-width: 600px; /* Ajustez la largeur selon vos besoins */
                            margin: 0 auto;
                        }

                        .frame {
                            display: flex;
                            flex-direction: column;
                            align-items: center;
                            background-color: #ffffff;
                            border: 1px solid #dddddd;
                            border-radius: 5px;
                            padding: 10px;
                            width: 48%; /* Ajustez la largeur selon vos besoins */
                            margin-bottom: 10px;
                        }

                        .image-container {
                            width: 50%;
                            text-align: center;
                        }

                            .image-container img {
                                max-width: 100%;
                                height: auto;
                            }

                        .text-container {
                            text-align: center;
                            margin-top: 10px;
                        }
                    </style>
                    <div class="story-card" @onclick="(() => tellStory = story)">
                        <div class="image-container">
                            <img alt="@story.Title" src="@story.Picture">
                        </div>
                        <div class="text-container">
                            <h2>@story.Title</h2>
                        </div>
                    </div>

                }
            </div>
        }
        else
        {

            <div class="story-modal">
                <h4>@tellStory.Title</h4>
                <p>@tellStory.Content</p>.
                <button @onclick="(() => tellStory = null)">Read another story</button>
            </div>
        }
    </div>
}
<div class="language-selection">
    <select @onchange="OnSelectLangageChanged">
        <option value="EN">English</option>
        <option value="FR">Français</option>
    </select>
</div>
<style>
    /* Style for the select element */
    #SelectLangage {
        padding: 8px 12px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: orange;
        color: black;
        margin-left: 10px;
    }

    /* Style for select options */
    #SelectLangage option {
        background-color: #fff;
        color: black;
    }

    /* Style for hover effect on options */
    #SelectLangage option:hover {
        background-color: #f0f0f0;
    }

    /* Style for input element */
    #hero-name-input {
        padding: 8px 12px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-left: 10px;
    }

    /* Style for the main container */
    .main-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
    }

    /* Style for story card container */
    .story-container {
        width: 100%;
    }

    /* Style for story card */
    .story-card {
        border: 1px solid;
        border-radius: 10px;
        padding: 10px;
        margin: 5px;
        width: calc(50% - 10px);
        display: flex;
        flex-direction: row;
        transition: transform 0.3s;
        cursor: pointer;
    }

    /* Style for image container */
    .image-container {
        width: 50%;
    }

    /* Style for story image */
    img {
        max-width: 100%;
        height: auto;
        border-radius: 5px;
    }

    /* Style for text container */
    .text-container {
        width: 50%;
        padding: 0 10px;
    }

    /* Style for story title */
    h2 {
        font-size: 24px;
        font-weight: bold;
        margin-top: 0;
        margin-bottom: 10px;
    }

    /* Style for story content */
    p {

font-size: 16px;
margin-bottom: 10px;

    }

    /* Style for story modal */
    .story-modal {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        max-width: 80%;
        margin: auto;
        margin-top: 50px;
    }

    /* Style for story modal title */
    .story-modal h4 {
        font-size: 24px;
        font-weight: bold;
        margin-top: 0;
        margin-bottom: 20px;
    }

    /* Style for story modal button */
    .story-modal button {
        background-color: orange;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    /* Style for story modal button hover */
    .story-modal button:hover {
        background-color: darkorange;
    }

    /* Style for language selection container */
    .language-selection {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
    }

    /* Style for language selection input */
    .language-selection input {
        margin-left: 10px;
    }

    /* Style for story card hover */
    .story-card:hover {
        transform: scale(1.05);
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    }

</style>
    @code
{
    private const string defaultLanguage = "EN";
    string SelectLangage = defaultLanguage;

    public record History(string Title, string Picture, string Content);

    static string picturePath = "https://raw.githubusercontent.com/anonimouche-Dev/Media/b22af42cdbfe8d390b9d96270d42b4d34da0492c/";

    public static string heroName;

    History? tellStory;
    List<History> stories = UpdateStories(defaultLanguage);
    // Method to handle language selection change
    void OnSelectLangageChanged(ChangeEventArgs e)
    {
        Console.WriteLine("OnSelectLangageChanged tttt");
        SelectLangage = e?.Value is null ? defaultLanguage : e!.Value!.ToString();
        UpdateStories(SelectLangage);
        StateHasChanged();
    }
        // Method to update stories based on language selection
        public static List<History> UpdateStories(string language)
        {
        Console.WriteLine("UpdateStories " + language);
            if (language == "EN")
            {
                return new List<History>() {
                new History("The Cake", picturePath + "cake-1914463_1280.jpg", $"Alert! Alert! A cake has been stolen! A hero appeared. The name of the hero was {heroName}. They caught the thief. The baker expressed his gratitude to {heroName}. The cakes were collected and eaten. A cake was offered to {heroName}. MIAM MIAM exclaimed {heroName}."),
                new History("The Abandoned Dog", picturePath + "chihuahua-3988105_1280.jpg", $"One day, {heroName} found an abandoned dog by the roadside. Determined to give it a new life, {heroName} adopted it and named it Mambo. Together, they embarked on numerous adventures and became the best of friends.")
            };
            }
             else
            {
                return new List<History>() {
                new History("Le Gâteau", picturePath + "cake-1914463_1280.jpg", $"Alerte ! Alerte ! Un gâteau a été volé ! Un héros est apparu. Le nom du héros était {heroName}. Ils ont attrapé le voleur. Le boulanger a exprimé sa gratitude à {heroName}. Les gâteaux ont été collectés et mangés. Un gâteau a été offert à {heroName}. MIAM MIAM s'est exclamé {heroName}."),
                new History("Le Chien Abandonné", picturePath + "chihuahua-3988105_1280.jpg", $"Un jour, {heroName} a trouvé un chien abandonné au bord de la route. Déterminé à lui donner une nouvelle vie, {heroName} l'a adopté et l'a nommé Mambo. Ensemble, ils se sont lancés dans de nombreuses aventures et sont devenus les meilleurs amis.")
             };
             }

        }

    async Task EnregistrerDonnées()
    {
        string path = "UserData.txt";
        string data = $"name=\"{heroName}\" language=\"{SelectLangage}\"";

        try
        {
            if (!File.Exists(path))
            {
                using (FileStream fs = File.Create(path)) { }
            }

            await File.WriteAllTextAsync(path, data);

            
        }
        catch (Exception ex)
        {
           
        }
    }



    }


