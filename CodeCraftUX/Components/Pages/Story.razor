@page "/"
@inject IJSRuntime JS



<div class="container">
    <header>
        <h1>CodeCraft_UX</h1>
        <p>Welcome to CodeCraft_UX app.</p>
        <div class="build-number">Build: @BuildNumber</div>
    </header>


    <form method="post" asp-controller="Account" asp-action="LoginWithGoogle">
        <button type="submit" class="btn-google">Se connecter avec son email ou nom d'utilisateur</button>
    </form>
    <div class="development-notice">En cours de développement</div>
</div>

<div class="theme-switch">
    <label>
        <input type="checkbox" @onchange="ToggleTheme" checked="@IsDarkMode" />
        Dark Mode
    </label>
</div>

<style>
    :root {
        --background-color-light: #f0f4f8;
        --text-color-light: #333333;
        --container-bg-color-light: #ffffff;
        --header-color-light: #333333;
        --subtext-color-light: #aaaaaa;
        --background-color-dark: #121212;
        --text-color-dark: #ffffff;
        --container-bg-color-dark: #1e1e1e;
        --header-color-dark: #ffffff;
        --subtext-color-dark: #bbbbbb;
    }

    body {
        background-color: var(--background-color);
        color: var(--text-color);
    }

    .container {
        text-align: center;
        background: var(--container-bg-color);
        padding: 40px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 600px;
        margin: 0 20px;
    }

    header h1 {
        font-size: 2.5rem;
        color: var(--header-color);
        margin-bottom: 0.5rem;
    }

    p {
        font-size: 1.2rem;
        color: var(--text-color);
        margin-bottom: 2rem;
    }

    .build-number {
        font-size: 0.9rem;
        color: var(--subtext-color);
        margin-bottom: 1.5rem;
    }

    .btn-google {
        display: inline-block;
        background-color: #4285f4;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        text-decoration: none;
        font-size: 1rem;
        transition: background-color 0.3s ease;
        border: none;
        cursor: pointer;
    }

        .btn-google:hover {
            background-color: #357ae8;
        }

    .development-notice {
        font-size: 0.9rem;
        color: #ff9800;
        margin-top: 2rem;
    }

    .theme-switch {
        position: absolute;
        top: 20px;
        right: 20px;
    }

    #SelectLangage {
        padding: 8px 12px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: orange;
        color: black;
        margin-left: 10px;
    }

        #SelectLangage option {
            background-color: #fff;
            color: black;
        }

            #SelectLangage option:hover {
                background-color: #f0f0f0;
            }

    #hero-name-input {
        padding: 8px 12px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-left: 10px;
    }

    .hero-greeting {
        margin-top: 20px;
    }

    /* Dark Mode Styles */
    body.dark-mode {
        --background-color: var(--background-color-dark);
        --text-color: var(--text-color-dark);
        --container-bg-color: var(--container-bg-color-dark);
        --header-color: var(--header-color-dark);
        --subtext-color: var(--subtext-color-dark);
    }
</style>

<script>
    function toggleTheme(isDarkMode) {
        if (isDarkMode) {
            document.body.classList.add('dark-mode');
        } else {
            document.body.classList.remove('dark-mode');
        }
    }
</script>

@code {
    private const string defaultLanguage = "EN";
    private string SelectLangage = defaultLanguage;
    private string heroName;
    private string BuildNumber { get; set; }
    private bool IsDarkMode { get; set; }

  

    private string GetPlaceholderText() => SelectLangage == "FR" ? "Entrez le nom du héros" : "Enter hero's name";
    private string GetGreetingText() => SelectLangage == "FR" ? $"Bonjour, {heroName}!" : $"Hello, {heroName}!";

    private void OnSelectLangageChanged(ChangeEventArgs e)
    {
        SelectLangage = e.Value?.ToString() ?? defaultLanguage;
    }

    private void SaveHeroName()
    {
        SauverNom(heroName);
    }

    public void SauverNom(string nom)
    {
        var path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "heroname.txt");
        File.WriteAllText(path, nom);
    }

    public string RecupererNomSauve()
    {
        var path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "heroname.txt");
        if (File.Exists(path))
        {
            return File.ReadAllText(path);
        }
        return string.Empty;
    }

    private async Task ToggleTheme(ChangeEventArgs e)
    {
        IsDarkMode = (bool)e.Value;
        await JS.InvokeVoidAsync("toggleTheme", IsDarkMode);
        SauverDarkMode(IsDarkMode);
    }

    public void SauverDarkMode(bool isDarkMode)
    {
        var path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "userprefs.txt");
        var prefs = new Dictionary<string, string> { { "darkmode", isDarkMode.ToString() } };
        File.WriteAllLines(path, prefs.Select(kvp => $"{kvp.Key}={kvp.Value}"));
    }

    public bool RecupererDarkMode()
    {
        var path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "userprefs.txt");
        if (File.Exists(path))
        {
            var prefs = File.ReadAllLines(path)
                            .Select(line => line.Split('='))
                            .ToDictionary(parts => parts[0], parts => parts[1]);
            if (prefs.TryGetValue("darkmode", out var isDarkModeStr) && bool.TryParse(isDarkModeStr, out var isDarkMode))
            {
                return isDarkMode;
            }
        }
        return false;
    }
}